/*
 * Copyright 2009, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// TODO: some how make this file conditionally compile different for C++
//     vs JavaScript like with #ifdef CPLUSPLUS etc..
[verbatim=cpp_glue,include="plugin/cross/marshaling_utils.h"]
namespace o3d {

%[
  A data type consisting of 2 numbers. A Float2 is represented in JavaScript by
  an array containing 2 numbers: [x, y].
%]
[binding_model=by_value, marshaled, nocpp, include="core/cross/types.h"]
class Float2 {
  [plugin_data, userglue_getter, userglue_setter, getter, setter, nodocs]
  float[] marshaled;

  [verbatim=cpp_glue] %{
    void userglue_setter_marshaled(
        void* plugin_data,
        o3d::Float2* self,
        const std::vector<float>& dynamicValue) {
      *self = o3d::VectorToType<o3d::Float2, 2>(
          plugin_data, dynamicValue);
    }

    std::vector<float> userglue_getter_marshaled(
        void* plugin_data,
        const o3d::Float2& self) {
      return o3d::VectorFromType<o3d::Float2, 2>(self);
    }
  %}
};

%[
  A data type consisting of 3 numbers. A Float3 is represented in JavaScript by
  an array containing 3 numbers: [x, y, z].
%]
[binding_model=by_value, marshaled, nocpp, include="core/cross/types.h"]
class Float3 {
  [plugin_data, userglue_getter, userglue_setter, getter, setter, nodocs]
  float[] marshaled;

  [verbatim=cpp_glue] %{
    void userglue_setter_marshaled(
        void* plugin_data,
        o3d::Float3* self,
        const std::vector<float>& dynamicValue) {
      *self = o3d::VectorToType<o3d::Float3, 3>(
          plugin_data, dynamicValue);
    }

    std::vector<float> userglue_getter_marshaled(
        void* plugin_data,
        const o3d::Float3& self) {
      return o3d::VectorFromType<o3d::Float3, 3>(self);
    }
  %}
};

%[
  A data type consisting of 4 numbers. A Float4 is represented in JavaScript by
  an array containing 4 numbers: [x, y, z, w].
%]
[binding_model=by_value, marshaled, nocpp, include="core/cross/types.h"]
class Float4 {
  [plugin_data, userglue_getter, userglue_setter, getter, setter, nodocs]
  float[] marshaled;

  [verbatim=cpp_glue] %{
    void userglue_setter_marshaled(
        void* plugin_data,
        o3d::Float4* self,
        const std::vector<float>& dynamicValue) {
      *self = o3d::VectorToType<o3d::Float4, 4>(
          plugin_data, dynamicValue);
    }

    std::vector<float> userglue_getter_marshaled(
        void* plugin_data,
        const o3d::Float4& self) {
      return o3d::VectorFromType<o3d::Float4, 4>(self);
    }
  %}
};

%[
  Id used to uniquely identify objects.
%]
[include="core/cross/types.h"] typedef int Id;

%[
  Data type for passing data around in the scenegraph.
%]
[include="core/cross/types.h"] typedef float Float;

%[
  Data type for passing data around in the scenegraph.
%]
[include="core/cross/types.h"] typedef std::string String;

}  // namespace o3d
