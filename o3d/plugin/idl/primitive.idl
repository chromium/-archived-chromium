/*
 * Copyright 2009, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

namespace o3d {

%[
  A Primitive is a type of Element that is made from a list of points,
  lines or triangles that use a single material.
%]
[nocpp, include="core/cross/primitive.h"]
class Primitive : Element {
  %[
    \var PrimitiveType,
      \li POINTLIST,
      \li LINELIST,
      \li LINESTRIP,
      \li TRIANGLELIST,
      \li TRIANGLESTRIP,
      \li TRIANGLEFAN

    Type of geometric primitives used by the Primitive.
  %]
  enum PrimitiveType {
    POINTLIST = 1,
    LINELIST = 2,
    LINESTRIP = 3,
    TRIANGLELIST = 4,
    TRIANGLESTRIP = 5,
    TRIANGLEFAN = 6
  };

  %[
    The type of primitive the primitive is (i.e., Primitive::POINTLIST,
    Primitive::LINELIST, Primitive::TRIANGLELIST, etc.)
  %]
  [getter, setter] Primitive::PrimitiveType primitive_type;

  %[
    The number of vertices the primitive has.
  %]
  [getter, setter] unsigned int number_vertices;

  %[
    The number of rendering primitives (i.e., triangles, points, lines) the
    primitive has.
  %]
  [getter, setter] unsigned int number_primitives;

  %[
    The index of the first vertex to render.
  %]
  [getter, setter] unsigned int start_index;

  %[
    The stream bank this primitive uses for vertices.
  %]
  [getter, setter] StreamBank? stream_bank;

  %[
    The index buffer for the primitive. If null the primitive is non-indexed.
  %]
  [getter, setter] IndexBuffer? index_buffer;
};  // Primitive

}  // namespace o3d
