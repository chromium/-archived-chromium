/*
 * Copyright 2009, Google Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *     * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following disclaimer
 * in the documentation and/or other materials provided with the
 * distribution.
 *     * Neither the name of Google Inc. nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


#include "core/cross/client.h"
#include "core/cross/bitmap.h"
#include "tests/common/win/testing_common.h"
#include "base/file_path.h"
#include "utils/cross/file_path_utils.h"

namespace o3d {

class BitmapTest : public testing::Test {
};

// The first 128 bytes of tga-256x256-24bit.tga, converted to BGRX format.
static unsigned char ktga256x256_24bit_BGRX[128] = {
  0x36, 0x87, 0xbc, 0xff, 0x36, 0x87, 0xbc, 0xff,
  0x35, 0x83, 0xb5, 0xff, 0x34, 0x83, 0xb5, 0xff,
  0x35, 0x83, 0xb5, 0xff, 0x35, 0x82, 0xb5, 0xff,
  0x35, 0x82, 0xb4, 0xff, 0x35, 0x82, 0xb4, 0xff,
  0x35, 0x82, 0xb4, 0xff, 0x35, 0x82, 0xb4, 0xff,
  0x35, 0x82, 0xb4, 0xff, 0x35, 0x82, 0xb4, 0xff,
  0x35, 0x82, 0xb4, 0xff, 0x35, 0x82, 0xb4, 0xff,
  0x35, 0x82, 0xb4, 0xff, 0x35, 0x82, 0xb4, 0xff,
  0x35, 0x82, 0xb4, 0xff, 0x35, 0x82, 0xb4, 0xff,
  0x35, 0x83, 0xb5, 0xff, 0x37, 0x85, 0xb8, 0xff,
  0x36, 0x85, 0xb8, 0xff, 0x35, 0x86, 0xb7, 0xff,
  0x35, 0x87, 0xb7, 0xff, 0x35, 0x88, 0xb7, 0xff,
  0x35, 0x89, 0xb7, 0xff, 0x34, 0x8a, 0xb7, 0xff,
  0x34, 0x8b, 0xb7, 0xff, 0x32, 0x8c, 0xb5, 0xff,
  0x31, 0x8c, 0xb1, 0xff, 0x2f, 0x8d, 0xaf, 0xff,
  0x1d, 0x8d, 0x96, 0xff, 0x1b, 0x8f, 0x90, 0xff,
};

static unsigned char ktga256x256_32bit_BGRA[128] = {
  0x36, 0x87, 0xbc, 0x7d, 0x36, 0x87, 0xbc, 0x7c,
  0x35, 0x83, 0xb5, 0x78, 0x34, 0x83, 0xb5, 0x77,
  0x35, 0x83, 0xb5, 0x77, 0x35, 0x82, 0xb5, 0x76,
  0x35, 0x82, 0xb4, 0x76, 0x35, 0x82, 0xb4, 0x76,
  0x35, 0x82, 0xb4, 0x76, 0x35, 0x82, 0xb4, 0x77,
  0x35, 0x82, 0xb4, 0x76, 0x35, 0x82, 0xb4, 0x77,
  0x35, 0x82, 0xb4, 0x76, 0x35, 0x82, 0xb4, 0x76,
  0x35, 0x82, 0xb4, 0x76, 0x35, 0x82, 0xb4, 0x76,
  0x35, 0x82, 0xb4, 0x76, 0x35, 0x82, 0xb4, 0x76,
  0x35, 0x83, 0xb5, 0x77, 0x37, 0x85, 0xb8, 0x7a,
  0x36, 0x85, 0xb8, 0x7a, 0x35, 0x86, 0xb7, 0x7a,
  0x35, 0x87, 0xb7, 0x7a, 0x35, 0x88, 0xb7, 0x7c,
  0x35, 0x89, 0xb7, 0x7c, 0x34, 0x8a, 0xb7, 0x7d,
  0x34, 0x8b, 0xb7, 0x7e, 0x32, 0x8c, 0xb5, 0x7e,
  0x31, 0x8c, 0xb1, 0x7d, 0x2f, 0x8d, 0xaf, 0x7c,
  0x1d, 0x8d, 0x96, 0x75, 0x1b, 0x8f, 0x90, 0x75,
};

static unsigned char kjpg256x256_BGRX[128] = {
  0x3a, 0x88, 0xbd, 0xff, 0x38, 0x86, 0xbb, 0xff,
  0x36, 0x85, 0xb8, 0xff, 0x34, 0x83, 0xb6, 0xff,
  0x36, 0x82, 0xb6, 0xff, 0x35, 0x82, 0xb3, 0xff,
  0x36, 0x82, 0xb3, 0xff, 0x36, 0x82, 0xb3, 0xff,
  0x35, 0x81, 0xb5, 0xff, 0x35, 0x81, 0xb5, 0xff,
  0x35, 0x81, 0xb5, 0xff, 0x35, 0x81, 0xb5, 0xff,
  0x35, 0x81, 0xb5, 0xff, 0x35, 0x81, 0xb5, 0xff,
  0x35, 0x81, 0xb5, 0xff, 0x35, 0x81, 0xb5, 0xff,
  0x34, 0x82, 0xb1, 0xff, 0x35, 0x82, 0xb3, 0xff,
  0x35, 0x84, 0xb7, 0xff, 0x36, 0x85, 0xb8, 0xff,
  0x36, 0x85, 0xb8, 0xff, 0x35, 0x87, 0xb7, 0xff,
  0x35, 0x87, 0xb7, 0xff, 0x36, 0x88, 0xb7, 0xff,
  0x32, 0x8a, 0xb3, 0xff, 0x34, 0x8c, 0xb5, 0xff,
  0x35, 0x8b, 0xb5, 0xff, 0x33, 0x8b, 0xb4, 0xff,
  0x32, 0x8d, 0xb2, 0xff, 0x2b, 0x8f, 0xa8, 0xff,
  0x21, 0x8d, 0x99, 0xff, 0x1a, 0x8f, 0x8e, 0xff,
};

static unsigned char kpng256x256_24bit_BGRX[128] = {
  0x36, 0x87, 0xbc, 0xff, 0x36, 0x87, 0xbc, 0xff,
  0x35, 0x83, 0xb5, 0xff, 0x34, 0x83, 0xb5, 0xff,
  0x35, 0x83, 0xb5, 0xff, 0x35, 0x82, 0xb5, 0xff,
  0x35, 0x82, 0xb4, 0xff, 0x35, 0x82, 0xb4, 0xff,
  0x35, 0x82, 0xb4, 0xff, 0x35, 0x82, 0xb4, 0xff,
  0x35, 0x82, 0xb4, 0xff, 0x35, 0x82, 0xb4, 0xff,
  0x35, 0x82, 0xb4, 0xff, 0x35, 0x82, 0xb4, 0xff,
  0x35, 0x82, 0xb4, 0xff, 0x35, 0x82, 0xb4, 0xff,
  0x35, 0x82, 0xb4, 0xff, 0x35, 0x82, 0xb4, 0xff,
  0x35, 0x83, 0xb5, 0xff, 0x37, 0x85, 0xb8, 0xff,
  0x36, 0x85, 0xb8, 0xff, 0x35, 0x86, 0xb7, 0xff,
  0x35, 0x87, 0xb7, 0xff, 0x35, 0x88, 0xb7, 0xff,
  0x35, 0x89, 0xb7, 0xff, 0x34, 0x8a, 0xb7, 0xff,
  0x34, 0x8b, 0xb7, 0xff, 0x32, 0x8c, 0xb5, 0xff,
  0x31, 0x8c, 0xb1, 0xff, 0x2f, 0x8d, 0xaf, 0xff,
  0x1d, 0x8d, 0x96, 0xff, 0x1b, 0x8f, 0x90, 0xff,
};

static unsigned char kpng256x256_24bit_interlaced_BGRX[128] = {
  0x36, 0x87, 0xbc, 0xff, 0x36, 0x87, 0xbc, 0xff,
  0x35, 0x83, 0xb5, 0xff, 0x34, 0x83, 0xb5, 0xff,
  0x35, 0x83, 0xb5, 0xff, 0x35, 0x82, 0xb5, 0xff,
  0x35, 0x82, 0xb4, 0xff, 0x35, 0x82, 0xb4, 0xff,
  0x35, 0x82, 0xb4, 0xff, 0x35, 0x82, 0xb4, 0xff,
  0x35, 0x82, 0xb4, 0xff, 0x35, 0x82, 0xb4, 0xff,
  0x35, 0x82, 0xb4, 0xff, 0x35, 0x82, 0xb4, 0xff,
  0x35, 0x82, 0xb4, 0xff, 0x35, 0x82, 0xb4, 0xff,
  0x35, 0x82, 0xb4, 0xff, 0x35, 0x82, 0xb4, 0xff,
  0x35, 0x83, 0xb5, 0xff, 0x37, 0x85, 0xb8, 0xff,
  0x36, 0x85, 0xb8, 0xff, 0x35, 0x86, 0xb7, 0xff,
  0x35, 0x87, 0xb7, 0xff, 0x35, 0x88, 0xb7, 0xff,
  0x35, 0x89, 0xb7, 0xff, 0x34, 0x8a, 0xb7, 0xff,
  0x34, 0x8b, 0xb7, 0xff, 0x32, 0x8c, 0xb5, 0xff,
  0x31, 0x8c, 0xb1, 0xff, 0x2f, 0x8d, 0xaf, 0xff,
  0x1d, 0x8d, 0x96, 0xff, 0x1b, 0x8f, 0x90, 0xff,
};

static unsigned char kpng256x256_32bit_BGRA[128] = {
  0x36, 0x87, 0xbc, 0xd4, 0x36, 0x87, 0xbc, 0xfa,
  0x35, 0x83, 0xb5, 0xff, 0x34, 0x83, 0xb5, 0xfe,
  0x35, 0x83, 0xb5, 0xf3, 0x35, 0x82, 0xb5, 0xcf,
  0x35, 0x82, 0xb4, 0x9a, 0x35, 0x82, 0xb4, 0x75,
  0x35, 0x82, 0xb4, 0x67, 0x35, 0x82, 0xb4, 0x7d,
  0x35, 0x82, 0xb4, 0xa8, 0x35, 0x82, 0xb4, 0xdd,
  0x35, 0x82, 0xb4, 0xf7, 0x35, 0x82, 0xb4, 0xff,
  0x35, 0x82, 0xb4, 0xff, 0x35, 0x82, 0xb4, 0xf8,
  0x35, 0x82, 0xb4, 0xaf, 0x35, 0x82, 0xb4, 0x68,
  0x35, 0x83, 0xb5, 0x5a, 0x37, 0x85, 0xb8, 0x6a,
  0x36, 0x85, 0xb8, 0xaf, 0x35, 0x86, 0xb7, 0xf8,
  0x35, 0x87, 0xb7, 0xff, 0x35, 0x88, 0xb7, 0xff,
  0x35, 0x89, 0xb7, 0xff, 0x34, 0x8a, 0xb7, 0xff,
  0x34, 0x8b, 0xb7, 0xff, 0x32, 0x8c, 0xb5, 0xff,
  0x31, 0x8c, 0xb1, 0xff, 0x2f, 0x8d, 0xaf, 0xff,
  0x1d, 0x8d, 0x96, 0xff, 0x1b, 0x8f, 0x90, 0xff,
};

static unsigned char kpng256x256_8bit_palette_BGRX[128] = {
  0x36, 0x89, 0xbb, 0xff, 0x36, 0x89, 0xbb, 0xff,
  0x35, 0x81, 0xb5, 0xff, 0x32, 0x84, 0xb5, 0xff,
  0x35, 0x81, 0xb5, 0xff, 0x35, 0x81, 0xb5, 0xff,
  0x35, 0x81, 0xb5, 0xff, 0x35, 0x81, 0xb5, 0xff,
  0x35, 0x81, 0xb5, 0xff, 0x35, 0x81, 0xb5, 0xff,
  0x35, 0x81, 0xb5, 0xff, 0x35, 0x81, 0xb5, 0xff,
  0x35, 0x81, 0xb5, 0xff, 0x35, 0x81, 0xb5, 0xff,
  0x35, 0x81, 0xb5, 0xff, 0x35, 0x81, 0xb5, 0xff,
  0x35, 0x81, 0xb5, 0xff, 0x35, 0x81, 0xb5, 0xff,
  0x35, 0x81, 0xb5, 0xff, 0x35, 0x85, 0xba, 0xff,
  0x35, 0x85, 0xba, 0xff, 0x36, 0x86, 0xb6, 0xff,
  0x36, 0x86, 0xb6, 0xff, 0x36, 0x86, 0xb6, 0xff,
  0x38, 0x8b, 0xb6, 0xff, 0x38, 0x8b, 0xb6, 0xff,
  0x38, 0x8b, 0xb6, 0xff, 0x33, 0x8b, 0xb2, 0xff,
  0x33, 0x8b, 0xb2, 0xff, 0x33, 0x8b, 0xb2, 0xff,
  0x1f, 0x8d, 0x91, 0xff, 0x1f, 0x8d, 0x91, 0xff,
};

static unsigned char kpng20x14_4bit_palette_BGRX[128] = {
  0xed, 0xed, 0xed, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
  0xff, 0xff, 0xff, 0xff, 0xed, 0xed, 0xed, 0xff,
  0xff, 0xff, 0xff, 0xff, 0x54, 0x54, 0x54, 0xff,
  0x33, 0x33, 0x33, 0xff, 0x33, 0x33, 0x33, 0xff,
  0x33, 0x33, 0x33, 0xff, 0x33, 0x33, 0x33, 0xff,
  0x33, 0x33, 0x33, 0xff, 0x33, 0x33, 0x33, 0xff,
  0x33, 0x33, 0x33, 0xff, 0x33, 0x33, 0x33, 0xff,
  0x54, 0x54, 0x54, 0xff, 0x33, 0x33, 0x33, 0xff,
};

static unsigned char kdxt1_256x256[128] = {
  0x47, 0xbc, 0x06, 0xb4, 0x5a, 0x6a, 0x6a, 0xea,
  0x27, 0xb4, 0x06, 0xb4, 0x57, 0x57, 0x57, 0x5e,
  0x06, 0xb4, 0x07, 0xb4, 0xaa, 0xaa, 0xaa, 0xaa,
  0x06, 0xb4, 0x07, 0xb4, 0xaa, 0xaa, 0xaa, 0xaa,
  0x46, 0xbc, 0x07, 0xb4, 0xd5, 0xf5, 0xf5, 0xa5,
  0x46, 0xbc, 0x27, 0xb4, 0xfd, 0xbf, 0xbf, 0xaf,
  0x47, 0xbc, 0x65, 0xac, 0xaa, 0xea, 0xea, 0x7a,
  0x46, 0xac, 0x83, 0x8c, 0xf0, 0x7c, 0x7c, 0x5f,
  0xe3, 0x8c, 0x83, 0x8c, 0x29, 0x0b, 0x0b, 0x02,
  0x03, 0x8d, 0xe3, 0x8c, 0xfd, 0xfd, 0xfd, 0xfd,
  0xe3, 0x8c, 0x03, 0x8d, 0x56, 0x5a, 0x5a, 0xaa,
  0x03, 0x95, 0x23, 0x95, 0x55, 0x55, 0x55, 0x00,
  0xc4, 0x9c, 0x23, 0x95, 0x55, 0xf5, 0xf5, 0x2f,
  0x24, 0x9c, 0xe4, 0x94, 0xf5, 0xbd, 0xbd, 0x02,
  0x25, 0xa4, 0x84, 0x94, 0xa9, 0x2a, 0x2a, 0x00,
  0x06, 0xb4, 0x45, 0xa4, 0xfd, 0xaf, 0xaf, 0x0a,
};

static unsigned char kdxt1_256x256_alpha[128] = {
  0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x02, 0x85, 0xe3, 0x8c, 0xff, 0x7f, 0x7f, 0x7f,
  0xe3, 0x8c, 0x03, 0x8d, 0xa8, 0xa8, 0xa8, 0xa8,
  0xe3, 0x8c, 0x03, 0x8d, 0x56, 0x5a, 0x5a, 0xaa,
  0x03, 0x95, 0x23, 0x95, 0x55, 0x55, 0x55, 0x00,
  0xe4, 0x94, 0x23, 0x95, 0x95, 0xa5, 0xa5, 0xca,
  0xa4, 0x94, 0x04, 0x95, 0xf9, 0xfe, 0xfe, 0xff,
  0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff,
  0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff,
};

static unsigned char kdxt1_256x256_mipmap[128] = {
  0x47, 0xbc, 0x06, 0xb4, 0x5a, 0x6a, 0x6a, 0xea,
  0x27, 0xb4, 0x06, 0xb4, 0x57, 0x57, 0x57, 0x5e,
  0x06, 0xb4, 0x07, 0xb4, 0xaa, 0xaa, 0xaa, 0xaa,
  0x06, 0xb4, 0x07, 0xb4, 0xaa, 0xaa, 0xaa, 0xaa,
  0x46, 0xbc, 0x07, 0xb4, 0xd5, 0xf5, 0xf5, 0xa5,
  0x46, 0xbc, 0x27, 0xb4, 0xfd, 0xbf, 0xbf, 0xaf,
  0x47, 0xbc, 0x65, 0xac, 0xaa, 0xea, 0xea, 0x7a,
  0x46, 0xac, 0x83, 0x8c, 0xf0, 0x7c, 0x7c, 0x5f,
  0xe3, 0x8c, 0x83, 0x8c, 0x29, 0x0b, 0x0b, 0x02,
  0x03, 0x8d, 0xe3, 0x8c, 0xfd, 0xfd, 0xfd, 0xfd,
  0xe3, 0x8c, 0x03, 0x8d, 0x56, 0x5a, 0x5a, 0xaa,
  0x03, 0x95, 0x23, 0x95, 0x55, 0x55, 0x55, 0x00,
  0xc4, 0x9c, 0x23, 0x95, 0x55, 0xf5, 0xf5, 0x2f,
  0x24, 0x9c, 0xe4, 0x94, 0xf5, 0xbd, 0xbd, 0x02,
  0x25, 0xa4, 0x84, 0x94, 0xa9, 0x2a, 0x2a, 0x00,
  0x06, 0xb4, 0x45, 0xa4, 0xfd, 0xaf, 0xaf, 0x0a,
};

static unsigned char kdxt3_256x256_alpha[128] = {
  0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
  0x47, 0xbc, 0x06, 0xb4, 0x5a, 0x6a, 0x6a, 0xea,
  0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
  0x27, 0xb4, 0x06, 0xb4, 0x57, 0x57, 0x57, 0x5e,
  0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
  0x07, 0xb4, 0x06, 0xb4, 0xaa, 0xaa, 0xaa, 0xaa,
  0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
  0x07, 0xb4, 0x06, 0xb4, 0xaa, 0xaa, 0xaa, 0xaa,
  0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
  0x46, 0xbc, 0x07, 0xb4, 0xd5, 0xb5, 0xb5, 0xa5,
  0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
  0x46, 0xbc, 0x27, 0xb4, 0xfd, 0xbf, 0xbf, 0xaf,
  0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
  0x47, 0xbc, 0x65, 0xac, 0xaa, 0xea, 0xea, 0x7a,
  0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
  0x46, 0xac, 0x83, 0x8c, 0xf0, 0x7c, 0x7c, 0x5f,
};

static unsigned char kdxt3_256x256_mipmap[128] = {
  0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
  0x47, 0xbc, 0x06, 0xb4, 0x5a, 0x6a, 0x6a, 0xea,
  0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
  0x27, 0xb4, 0x06, 0xb4, 0x57, 0x57, 0x57, 0x5e,
  0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
  0x07, 0xb4, 0x06, 0xb4, 0xaa, 0xaa, 0xaa, 0xaa,
  0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
  0x07, 0xb4, 0x06, 0xb4, 0xaa, 0xaa, 0xaa, 0xaa,
  0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
  0x46, 0xbc, 0x07, 0xb4, 0xd5, 0xb5, 0xb5, 0xa5,
  0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
  0x46, 0xbc, 0x27, 0xb4, 0xfd, 0xbf, 0xbf, 0xaf,
  0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
  0x47, 0xbc, 0x65, 0xac, 0xaa, 0xea, 0xea, 0x7a,
  0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77,
  0x46, 0xac, 0x83, 0x8c, 0xf0, 0x7c, 0x7c, 0x5f,
};

static unsigned char kdxt5_256x256_alpha[128] = {
  0x7e, 0x77, 0xda, 0x23, 0x00, 0x90, 0x0a, 0x00,
  0x47, 0xbc, 0x06, 0xb4, 0x5a, 0x6a, 0x6a, 0xea,
  0x78, 0x76, 0x4e, 0x02, 0x00, 0x70, 0x02, 0x00,
  0x27, 0xb4, 0x06, 0xb4, 0x57, 0x57, 0x57, 0x5e,
  0x77, 0x75, 0x86, 0x61, 0x00, 0xb0, 0x6d, 0x00,
  0x07, 0xb4, 0x06, 0xb4, 0xaa, 0xaa, 0xaa, 0xaa,
  0x77, 0x76, 0x49, 0x82, 0x00, 0x41, 0x12, 0x00,
  0x07, 0xb4, 0x06, 0xb4, 0xaa, 0xaa, 0xaa, 0xaa,
  0x7c, 0x76, 0xc9, 0x77, 0x00, 0xff, 0x60, 0x00,
  0x46, 0xbc, 0x07, 0xb4, 0xd5, 0xb5, 0xb5, 0xa5,
  0x7c, 0x7a, 0x49, 0x60, 0x00, 0x36, 0x60, 0x00,
  0x46, 0xbc, 0x27, 0xb4, 0xfd, 0xbf, 0xbf, 0xaf,
  0x7e, 0x7c, 0x31, 0x60, 0x00, 0x06, 0x6c, 0x00,
  0x47, 0xbc, 0x65, 0xac, 0xaa, 0xea, 0xea, 0x7a,
  0x7d, 0x75, 0x50, 0x82, 0x00, 0x7c, 0x98, 0x00,
  0x46, 0xac, 0x83, 0x8c, 0xf0, 0x7c, 0x7c, 0x5f,
};

static unsigned char kdxt5_256x256_mipmap[128] = {
  0x7e, 0x77, 0xda, 0x23, 0x00, 0x90, 0x0a, 0x00,
  0x47, 0xbc, 0x06, 0xb4, 0x5a, 0x6a, 0x6a, 0xea,
  0x78, 0x76, 0x4e, 0x02, 0x00, 0x70, 0x02, 0x00,
  0x27, 0xb4, 0x06, 0xb4, 0x57, 0x57, 0x57, 0x5e,
  0x77, 0x75, 0x86, 0x61, 0x00, 0xb0, 0x6d, 0x00,
  0x07, 0xb4, 0x06, 0xb4, 0xaa, 0xaa, 0xaa, 0xaa,
  0x77, 0x76, 0x49, 0x82, 0x00, 0x41, 0x12, 0x00,
  0x07, 0xb4, 0x06, 0xb4, 0xaa, 0xaa, 0xaa, 0xaa,
  0x7c, 0x76, 0xc9, 0x77, 0x00, 0xff, 0x60, 0x00,
  0x46, 0xbc, 0x07, 0xb4, 0xd5, 0xb5, 0xb5, 0xa5,
  0x7c, 0x7a, 0x49, 0x60, 0x00, 0x36, 0x60, 0x00,
  0x46, 0xbc, 0x27, 0xb4, 0xfd, 0xbf, 0xbf, 0xaf,
  0x7e, 0x7c, 0x31, 0x60, 0x00, 0x06, 0x6c, 0x00,
  0x47, 0xbc, 0x65, 0xac, 0xaa, 0xea, 0xea, 0x7a,
  0x7d, 0x75, 0x50, 0x82, 0x00, 0x7c, 0x98, 0x00,
  0x46, 0xac, 0x83, 0x8c, 0xf0, 0x7c, 0x7c, 0x5f,
};

// Match the first 128 bytes of a loaded bitmap data againt known values.
bool TestBitmapData(const Bitmap &bitmap, unsigned char reference[128]) {
  if (!bitmap.image_data()) return false;
  return std::memcmp(bitmap.image_data(), reference, sizeof(reference)) == 0;
}

// Prints the first 128 bytes of a loaded bitmap data. Helper function to
// generate the known data above.
bool PrintBitmapData(const Bitmap &bitmap, const char *name) {
  const unsigned char *data = bitmap.image_data();
  if (!data) return false;
  printf("static unsigned char %s[128] = {\n", name);
  for (int i = 0; i < 16; ++i) {
    printf(" ");
    for (int j = 0; j < 8; ++j) {
      printf(" 0x%02x,", data[i*8+j]);
    }
    printf("\n");
  }
  printf("};\n");
  return true;
}


// -----------------------------------------------------------------------------

// Loads a 24 bit TGA file, checks it against the known data.
TEST_F(BitmapTest, LoadTGAFile24bit) {
  // Load the texture object from a file.
  String filename = *g_program_path + "/bitmap_test/tga-256x256-24bit.tga";
  FilePath filepath = UTF8ToFilePath(filename);
  Bitmap bitmap;
  EXPECT_TRUE(bitmap.LoadFromFile(filepath, Bitmap::TGA, false));
  EXPECT_TRUE(bitmap.image_data() != NULL);
  EXPECT_FALSE(bitmap.is_cubemap());
  EXPECT_EQ(Texture::XRGB8, bitmap.format());
  EXPECT_EQ(256, bitmap.width());
  EXPECT_EQ(256, bitmap.height());
  EXPECT_EQ(1, bitmap.num_mipmaps());
  EXPECT_TRUE(TestBitmapData(bitmap, ktga256x256_24bit_BGRX));
}

// Loads a 32 bit TGA file, checks it against the known data.
TEST_F(BitmapTest, LoadTGAFile32bit) {
  String filename = *g_program_path + "/bitmap_test/tga-256x256-32bit.tga";
  FilePath filepath = UTF8ToFilePath(filename);
  Bitmap bitmap;
  EXPECT_TRUE(bitmap.LoadFromFile(filepath, Bitmap::TGA, false));
  EXPECT_TRUE(bitmap.image_data() != NULL);
  EXPECT_FALSE(bitmap.is_cubemap());
  EXPECT_EQ(Texture::ARGB8, bitmap.format());
  EXPECT_EQ(256, bitmap.width());
  EXPECT_EQ(256, bitmap.height());
  EXPECT_EQ(1, bitmap.num_mipmaps());
  EXPECT_TRUE(TestBitmapData(bitmap, ktga256x256_32bit_BGRA));
}

// Tries to load a 5kx5k TGA file, which should fail.
TEST_F(BitmapTest, LoadTGAFileTooLarge) {
  // NOTE: the 5kx5k.tga file only has the first 4k bytes, to avoid
  // creating a 100MB test file. The code reads the header (first 18 bytes),
  // but bails before reading the actual image bytes.
  String filename = *g_program_path + "/bitmap_test/5kx5k.tga";
  FilePath filepath = UTF8ToFilePath(filename);
  Bitmap bitmap;
  EXPECT_FALSE(bitmap.LoadFromFile(filepath, Bitmap::TGA, false));
  EXPECT_TRUE(bitmap.image_data() == NULL);
}

// Loads a JPEG file, checks it against the known data.
TEST_F(BitmapTest, LoadJPEGFile) {
  String filename = *g_program_path + "/bitmap_test/jpeg-256x256.jpg";
  FilePath filepath = UTF8ToFilePath(filename);
  Bitmap bitmap;
  EXPECT_TRUE(bitmap.LoadFromFile(filepath, Bitmap::JPEG, false));
  EXPECT_TRUE(bitmap.image_data() != NULL);
  EXPECT_FALSE(bitmap.is_cubemap());
  EXPECT_EQ(Texture::XRGB8, bitmap.format());
  EXPECT_EQ(256, bitmap.width());
  EXPECT_EQ(256, bitmap.height());
  EXPECT_EQ(1, bitmap.num_mipmaps());
  EXPECT_TRUE(TestBitmapData(bitmap, kjpg256x256_BGRX));
}

// Tries to load a 5kx5k JPEG file, which should fail.
TEST_F(BitmapTest, LoadJPEGFileTooLarge) {
  String filename = *g_program_path + "/bitmap_test/5kx5k.jpg";
  FilePath filepath = UTF8ToFilePath(filename);
  Bitmap bitmap;
  EXPECT_FALSE(bitmap.LoadFromFile(filepath, Bitmap::JPEG, false));
  EXPECT_TRUE(bitmap.image_data() == NULL);
}

// Loads a 24 bit PNG file, checks it against the known data.
TEST_F(BitmapTest, LoadPNGFile24bit) {
  String filename = *g_program_path + "/bitmap_test/png-256x256-24bit.png";
  FilePath filepath = UTF8ToFilePath(filename);
  Bitmap bitmap;
  EXPECT_TRUE(bitmap.LoadFromFile(filepath, Bitmap::PNG, false));
  EXPECT_TRUE(bitmap.image_data() != NULL);
  EXPECT_FALSE(bitmap.is_cubemap());
  EXPECT_EQ(Texture::XRGB8, bitmap.format());
  EXPECT_EQ(256, bitmap.width());
  EXPECT_EQ(256, bitmap.height());
  EXPECT_EQ(1, bitmap.num_mipmaps());
  EXPECT_TRUE(TestBitmapData(bitmap, kpng256x256_24bit_BGRX));
}

// Loads a 24 bit interlaced PNG file, checks it against the known data.
TEST_F(BitmapTest, LoadPNGFile24bitInterlaced) {
  String filename = *g_program_path +
                    "/bitmap_test/png-256x256-24bit-interlaced.png";
  FilePath filepath = UTF8ToFilePath(filename);
  Bitmap bitmap;
  EXPECT_TRUE(bitmap.LoadFromFile(filepath, Bitmap::PNG, false));
  EXPECT_TRUE(bitmap.image_data() != NULL);
  EXPECT_FALSE(bitmap.is_cubemap());
  EXPECT_EQ(Texture::XRGB8, bitmap.format());
  EXPECT_EQ(256, bitmap.width());
  EXPECT_EQ(256, bitmap.height());
  EXPECT_EQ(1, bitmap.num_mipmaps());
  EXPECT_TRUE(TestBitmapData(bitmap, kpng256x256_24bit_interlaced_BGRX));
}

TEST_F(BitmapTest, LoadPNGFile32bit) {
  String filename = *g_program_path + "/bitmap_test/png-256x256-32bit.png";
  FilePath filepath = UTF8ToFilePath(filename);
  Bitmap bitmap;
  EXPECT_TRUE(bitmap.LoadFromFile(filepath, Bitmap::PNG, false));
  EXPECT_TRUE(bitmap.image_data() != NULL);
  EXPECT_FALSE(bitmap.is_cubemap());
  EXPECT_EQ(Texture::ARGB8, bitmap.format());
  EXPECT_EQ(256, bitmap.width());
  EXPECT_EQ(256, bitmap.height());
  EXPECT_EQ(1, bitmap.num_mipmaps());
  EXPECT_TRUE(TestBitmapData(bitmap, kpng256x256_32bit_BGRA));
}

// Loads a palettized PNG file, checks it against the known data.
TEST_F(BitmapTest, LoadPNGFile8bitPalette) {
  String filename = *g_program_path +
                    "/bitmap_test/png-256x256-8bit-palette.png";
  FilePath filepath = UTF8ToFilePath(filename);
  Bitmap bitmap;
  EXPECT_TRUE(bitmap.LoadFromFile(filepath, Bitmap::PNG, false));
  EXPECT_TRUE(bitmap.image_data() != NULL);
  EXPECT_FALSE(bitmap.is_cubemap());
  EXPECT_EQ(Texture::XRGB8, bitmap.format());
  EXPECT_EQ(256, bitmap.width());
  EXPECT_EQ(256, bitmap.height());
  EXPECT_EQ(1, bitmap.num_mipmaps());
  EXPECT_TRUE(TestBitmapData(bitmap, kpng256x256_8bit_palette_BGRX));
}

// Loads a palettized PNG file, checks it against the known data.
TEST_F(BitmapTest, LoadPNGFile4bitPalette) {
  String filename = *g_program_path +
                    "/bitmap_test/png-20x14-4bit-palette.png";
  FilePath filepath = UTF8ToFilePath(filename);
  Bitmap bitmap;
  EXPECT_TRUE(bitmap.LoadFromFile(filepath, Bitmap::PNG, false));
  EXPECT_TRUE(bitmap.image_data() != NULL);
  EXPECT_FALSE(bitmap.is_cubemap());
  EXPECT_EQ(Texture::XRGB8, bitmap.format());
  EXPECT_EQ(20, bitmap.width());
  EXPECT_EQ(14, bitmap.height());
  EXPECT_EQ(1, bitmap.num_mipmaps());
  EXPECT_TRUE(TestBitmapData(bitmap, kpng20x14_4bit_palette_BGRX));
}


// Tries to load a 5kx5k PNG file, which should fail.
TEST_F(BitmapTest, LoadPNGFileTooLarge) {
  String filename = *g_program_path + "/bitmap_test/5kx5k.png";
  FilePath filepath = UTF8ToFilePath(filename);
  Bitmap bitmap;
  EXPECT_FALSE(bitmap.LoadFromFile(filepath, Bitmap::PNG, false));
  EXPECT_TRUE(bitmap.image_data() == NULL);
}

// NOTE: Having trouble recognising the alpha channel in a PNG
// exported from Photoshop.
/*
TEST_F(BitmapTest, LoadPNGFile8bitPaletteAlpha) {
  String filename = *g_program_path +
      "/bitmap_test/png-256x256-8bit-palette-alpha.png";
  FilePath filepath = UTF8ToFilePath(filename);
  Bitmap bitmap;
  EXPECT_TRUE(bitmap.LoadFromFile(filepath, Bitmap::PNG, false));
  EXPECT_TRUE(bitmap.image_data() != NULL);
  EXPECT_FALSE(bitmap.is_cubemap());
  EXPECT_EQ(Texture::ARGB8, bitmap.format());
  EXPECT_EQ(256, bitmap.width());
  EXPECT_EQ(256, bitmap.height());
  EXPECT_EQ(1, bitmap.num_mipmaps());
}
*/

// Loads a DXT1 DDS file, checks the format.
TEST_F(BitmapTest, LoadDDSFileDXT1) {
  String filename = *g_program_path + "/bitmap_test/dds-dxt1-256x256.dds";
  FilePath filepath = UTF8ToFilePath(filename);
  Bitmap bitmap;
  EXPECT_TRUE(bitmap.LoadFromFile(filepath, Bitmap::DDS, false));
  EXPECT_TRUE(bitmap.image_data() != NULL);
  EXPECT_FALSE(bitmap.is_cubemap());
  EXPECT_EQ(Texture::DXT1, bitmap.format());
  EXPECT_EQ(256, bitmap.width());
  EXPECT_EQ(256, bitmap.height());
  EXPECT_EQ(1, bitmap.num_mipmaps());
  EXPECT_TRUE(TestBitmapData(bitmap, kdxt1_256x256));
}

// Loads a DXT1 DDS file with alpha, checks the format.
TEST_F(BitmapTest, LoadDDSFileDXT1Alpha) {
  String filename = *g_program_path +
      "/bitmap_test/dds-dxt1-256x256-alpha.dds";
  FilePath filepath = UTF8ToFilePath(filename);
  Bitmap bitmap;
  EXPECT_TRUE(bitmap.LoadFromFile(filepath, Bitmap::DDS, false));
  EXPECT_TRUE(bitmap.image_data() != NULL);
  EXPECT_FALSE(bitmap.is_cubemap());
  EXPECT_EQ(Texture::DXT1, bitmap.format());
  EXPECT_EQ(256, bitmap.width());
  EXPECT_EQ(256, bitmap.height());
  EXPECT_EQ(1, bitmap.num_mipmaps());
  EXPECT_TRUE(TestBitmapData(bitmap, kdxt1_256x256_alpha));
}

// Loads a DXT1 DDS file with mipmaps, checks the format.
TEST_F(BitmapTest, LoadDDSFileDXT1Mipmap) {
  String filename = *g_program_path +
      "/bitmap_test/dds-dxt1-256x256-mipmap.dds";
  FilePath filepath = UTF8ToFilePath(filename);
  Bitmap bitmap;
  EXPECT_TRUE(bitmap.LoadFromFile(filepath, Bitmap::DDS, false));
  EXPECT_TRUE(bitmap.image_data() != NULL);
  EXPECT_FALSE(bitmap.is_cubemap());
  EXPECT_EQ(Texture::DXT1, bitmap.format());
  EXPECT_EQ(256, bitmap.width());
  EXPECT_EQ(256, bitmap.height());
  EXPECT_EQ(9, bitmap.num_mipmaps());
  for (unsigned int i = 0; i < bitmap.num_mipmaps(); ++i) {
    EXPECT_TRUE(bitmap.GetMipData(i, TextureCUBE::FACE_POSITIVE_X) != NULL);
  }
  EXPECT_TRUE(TestBitmapData(bitmap, kdxt1_256x256_mipmap));
}

// Loads a DXT3 DDS file, checks the format.
TEST_F(BitmapTest, LoadDDSFileDXT3) {
  String filename = *g_program_path +
      "/bitmap_test/dds-dxt3-256x256-alpha.dds";
  FilePath filepath = UTF8ToFilePath(filename);
  Bitmap bitmap;
  EXPECT_TRUE(bitmap.LoadFromFile(filepath, Bitmap::DDS, false));
  EXPECT_TRUE(bitmap.image_data() != NULL);
  EXPECT_FALSE(bitmap.is_cubemap());
  EXPECT_EQ(Texture::DXT3, bitmap.format());
  EXPECT_EQ(256, bitmap.width());
  EXPECT_EQ(256, bitmap.height());
  EXPECT_EQ(1, bitmap.num_mipmaps());
  EXPECT_TRUE(TestBitmapData(bitmap, kdxt3_256x256_alpha));
}

// Loads a DXT3 DDS file with mipmaps, checks the format.
TEST_F(BitmapTest, LoadDDSFileDXT3Mipmap) {
  String filename = *g_program_path +
      "/bitmap_test/dds-dxt3-256x256-mipmap.dds";
  FilePath filepath = UTF8ToFilePath(filename);
  Bitmap bitmap;
  EXPECT_TRUE(bitmap.LoadFromFile(filepath, Bitmap::DDS, false));
  EXPECT_TRUE(bitmap.image_data() != NULL);
  EXPECT_FALSE(bitmap.is_cubemap());
  EXPECT_EQ(Texture::DXT3, bitmap.format());
  EXPECT_EQ(256, bitmap.width());
  EXPECT_EQ(256, bitmap.height());
  EXPECT_EQ(9, bitmap.num_mipmaps());
  for (unsigned int i = 0; i < bitmap.num_mipmaps(); ++i) {
    EXPECT_TRUE(bitmap.GetMipData(i, TextureCUBE::FACE_POSITIVE_X) != NULL);
  }
  EXPECT_TRUE(TestBitmapData(bitmap, kdxt3_256x256_mipmap));
}

// Loads a DXT5 DDS file, checks the format.
TEST_F(BitmapTest, LoadDDSFileDXT5) {
  String filename = *g_program_path +
      "/bitmap_test/dds-dxt5-256x256-alpha.dds";
  FilePath filepath = UTF8ToFilePath(filename);
  Bitmap bitmap;
  EXPECT_TRUE(bitmap.LoadFromFile(filepath, Bitmap::DDS, false));
  EXPECT_TRUE(bitmap.image_data() != NULL);
  EXPECT_FALSE(bitmap.is_cubemap());
  EXPECT_EQ(Texture::DXT5, bitmap.format());
  EXPECT_EQ(256, bitmap.width());
  EXPECT_EQ(256, bitmap.height());
  EXPECT_EQ(1, bitmap.num_mipmaps());
  EXPECT_TRUE(TestBitmapData(bitmap, kdxt5_256x256_alpha));
}

// Loads a DXT5 DDS file with mipmaps, checks the format.
TEST_F(BitmapTest, LoadDDSFileDXT5Mipmap) {
  String filename = *g_program_path +
      "/bitmap_test/dds-dxt5-256x256-mipmap.dds";
  FilePath filepath = UTF8ToFilePath(filename);
  Bitmap bitmap;
  EXPECT_TRUE(bitmap.LoadFromFile(filepath, Bitmap::DDS, false));
  EXPECT_TRUE(bitmap.image_data() != NULL);
  EXPECT_FALSE(bitmap.is_cubemap());
  EXPECT_EQ(Texture::DXT5, bitmap.format());
  EXPECT_EQ(256, bitmap.width());
  EXPECT_EQ(256, bitmap.height());
  EXPECT_EQ(9, bitmap.num_mipmaps());
  for (unsigned int i = 0; i < bitmap.num_mipmaps(); ++i) {
    EXPECT_TRUE(bitmap.GetMipData(i, TextureCUBE::FACE_POSITIVE_X) != NULL);
  }
  EXPECT_TRUE(TestBitmapData(bitmap, kdxt5_256x256_mipmap));
}

// Tries to load a 5kx5k DDS file, which should fail.
TEST_F(BitmapTest, LoadDDSFileTooLarge) {
  // NOTE: the 5kx5k.dds file only has the first 4k bytes, to avoid
  // creating a 100MB test file. The code reads the header (first 128 bytes),
  // but bails before reading the actual image bytes.
  String filename = *g_program_path + "/bitmap_test/5kx5k.dds";
  FilePath filepath = UTF8ToFilePath(filename);
  Bitmap bitmap;
  EXPECT_FALSE(bitmap.LoadFromFile(filepath, Bitmap::DDS, false));
  EXPECT_TRUE(bitmap.image_data() == NULL);
}


// NOTE: untested ffile types are:
//    png grayscale textures
//    dds cube maps
//    dds mipmapped cube maps
//    dds 1D textures
//    dds 3D textures


static const unsigned char kMipmapDataPOT[] = {
  // This is a 4x4 image
  0x7D, 0xE4, 0x0F, 0xff, 0x71, 0x7B, 0x9C, 0xff,
  0xDD, 0xF0, 0x9D, 0xff, 0xFA, 0x08, 0x49, 0xff,
  0xEA, 0x28, 0xF6, 0xff, 0x73, 0x10, 0x64, 0xff,
  0x8B, 0x36, 0x58, 0xff, 0x7A, 0x3E, 0x21, 0xff,
  0x64, 0xCE, 0xB1, 0xff, 0x36, 0x4D, 0xC5, 0xff,
  0xF3, 0x99, 0x7E, 0xff, 0x5C, 0x56, 0x1E, 0xff,
  0x59, 0x8C, 0x41, 0xff, 0x39, 0x24, 0x1B, 0xff,
  0x5D, 0x4D, 0x96, 0xff, 0x5E, 0xF8, 0x8B, 0xff,
  // Followed by its 2x2 mip level
  0x92, 0x65, 0x81, 0xff, 0xb7, 0x5b, 0x57, 0xff,
  0x4b, 0x72, 0x74, 0xff, 0x82, 0x8d, 0x6f, 0xff,
  // Followed by its 1x1 mip level
  0x85, 0x6f, 0x6e, 0xff,
};

// Generates mip-maps from a known power-of-two image, compare with expected
// results.
TEST_F(BitmapTest, GenerateMipmapsPOT) {
  const unsigned int kWidth = 4;
  const unsigned int kHeight = 4;
  const unsigned int kComponents = 4;
  const Texture::Format format = Texture::ARGB8;
  unsigned int mipmaps = Bitmap::GetMipMapCount(kWidth, kHeight);
  EXPECT_EQ(3, mipmaps);
  unsigned int size = Bitmap::GetMipChainSize(kWidth, kHeight, format, mipmaps);
  ASSERT_EQ(sizeof(kMipmapDataPOT), size);
  scoped_array<unsigned char> data(new unsigned char[size]);
  ASSERT_TRUE(data.get() != NULL);
  // Copy first level into the buffer.
  unsigned int base_size = Bitmap::GetMipChainSize(kWidth, kHeight, format, 1);
  memcpy(data.get(), kMipmapDataPOT, base_size);
  Bitmap::GenerateMipmaps(kWidth, kHeight, format, mipmaps, data.get());
  // Check the result.
  EXPECT_EQ(0, memcmp(data.get(), kMipmapDataPOT, size));
}

static const unsigned char kMipmapDataNPOT[] = {
  // This is a 7x7 image
  0x0d, 0x16, 0x68, 0x1b, 0xe6, 0x09, 0x89, 0x55,
  0xda, 0x28, 0x56, 0x55, 0x3e, 0x00, 0x6f, 0x16,
  0x98, 0x11, 0x50, 0x72, 0xe7, 0x17, 0x24, 0xca,
  0x05, 0xe9, 0x92, 0x43, 0xd6, 0xc4, 0x57, 0xcd,
  0x34, 0x9b, 0x86, 0xcf, 0x50, 0x65, 0xc4, 0x83,
  0xaf, 0xa3, 0xaa, 0xe3, 0x7c, 0xab, 0x5f, 0x08,
  0xc1, 0x2e, 0xd1, 0xe9, 0xa8, 0x2b, 0x56, 0x64,
  0x12, 0x74, 0x92, 0x56, 0x30, 0x16, 0xa0, 0x03,
  0x5a, 0x3a, 0x88, 0xb9, 0xe8, 0xa3, 0xfd, 0xf6,
  0xa1, 0x3b, 0x7b, 0x2d, 0xfd, 0x71, 0xc0, 0x0b,
  0x22, 0x31, 0x41, 0x5a, 0x45, 0x6f, 0x6b, 0x1b,
  0x10, 0x5a, 0x16, 0x6e, 0x02, 0x89, 0x12, 0xb1,
  0x67, 0xfc, 0x43, 0x78, 0xc0, 0x55, 0x59, 0xa3,
  0xf8, 0xe2, 0x6b, 0xb7, 0xad, 0x5f, 0x3c, 0x14,
  0xe1, 0x0e, 0x84, 0x89, 0x25, 0xa7, 0xea, 0xc6,
  0x63, 0x20, 0xf9, 0x84, 0xa1, 0xcd, 0x62, 0x0f,
  0x22, 0xab, 0x59, 0xde, 0xbd, 0xfa, 0xab, 0x4d,
  0xca, 0x07, 0x85, 0xdf, 0x83, 0x23, 0x80, 0x8b,
  0x5e, 0xe4, 0x57, 0x45, 0x81, 0x34, 0x52, 0x65,
  0xf0, 0x14, 0x32, 0x33, 0xfe, 0xe4, 0x31, 0x90,
  0x15, 0x51, 0x57, 0x89, 0xed, 0xcf, 0x88, 0xc9,
  0x7b, 0xbb, 0xc6, 0x41, 0xd5, 0x93, 0x7c, 0x65,
  0x39, 0x80, 0x20, 0xa2, 0xe5, 0xca, 0x9b, 0x7e,
  0xb2, 0x1f, 0x0d, 0xdc, 0x5c, 0xab, 0x6b, 0x5b,
  0xc5, 0x57, 0xc0, 0xd2,
  // Followed by its 3x3 mip level
  0x75, 0x58, 0x7b, 0x76, 0x8a, 0x54, 0x85, 0x6f,
  0x93, 0x56, 0x74, 0x7d, 0x3f, 0x58, 0x7a, 0x64,
  0x7a, 0x90, 0x75, 0x8f, 0xb4, 0x7c, 0x71, 0x6b,
  0x84, 0x84, 0x85, 0x6c, 0xb1, 0x73, 0x4f, 0x7c,
  0x97, 0x87, 0x78, 0xa2,
  // Followed by its 1x1 mip level
  0x88, 0x6e, 0x75, 0x7a,
};

// Generates mip-maps from a known non-power-of-two image, compare with expected
// results.
TEST_F(BitmapTest, GenerateMipmapsNPOT) {
  const unsigned int kWidth = 7;
  const unsigned int kHeight = 7;
  const unsigned int kComponents = 4;
  const Texture::Format format = Texture::ARGB8;
  unsigned int mipmaps = Bitmap::GetMipMapCount(kWidth, kHeight);
  EXPECT_EQ(3, mipmaps);
  unsigned int size = Bitmap::GetMipChainSize(kWidth, kHeight, format, mipmaps);
  ASSERT_EQ(sizeof(kMipmapDataNPOT), size);
  scoped_array<unsigned char> data(new unsigned char[size]);
  ASSERT_TRUE(data.get() != NULL);
  // Copy first level into the buffer.
  unsigned int base_size = Bitmap::GetMipChainSize(kWidth, kHeight, format, 1);
  memcpy(data.get(), kMipmapDataNPOT, base_size);
  Bitmap::GenerateMipmaps(kWidth, kHeight, format, mipmaps, data.get());
  // Check the result.
  EXPECT_EQ(0, memcmp(data.get(), kMipmapDataNPOT, size));
}

// Checks that filenames are detected as the correct type.
TEST_F(BitmapTest, GetFileTypeFromFilename) {
  EXPECT_EQ(Bitmap::TGA, Bitmap::GetFileTypeFromFilename("foo.tga"));
  EXPECT_EQ(Bitmap::TGA, Bitmap::GetFileTypeFromFilename("BAR.TGA"));
  EXPECT_EQ(Bitmap::PNG, Bitmap::GetFileTypeFromFilename("foo.png"));
  EXPECT_EQ(Bitmap::PNG, Bitmap::GetFileTypeFromFilename("BAR.PNG"));
  EXPECT_EQ(Bitmap::JPEG, Bitmap::GetFileTypeFromFilename("foo.jpeg"));
  EXPECT_EQ(Bitmap::JPEG, Bitmap::GetFileTypeFromFilename("BAR.JPEG"));
  EXPECT_EQ(Bitmap::JPEG, Bitmap::GetFileTypeFromFilename("foo.jpg"));
  EXPECT_EQ(Bitmap::JPEG, Bitmap::GetFileTypeFromFilename("BAR.JPG"));
  EXPECT_EQ(Bitmap::JPEG, Bitmap::GetFileTypeFromFilename("foo.jpe"));
  EXPECT_EQ(Bitmap::JPEG, Bitmap::GetFileTypeFromFilename("BAR.JPE"));
  EXPECT_EQ(Bitmap::DDS, Bitmap::GetFileTypeFromFilename("foo.dds"));
  EXPECT_EQ(Bitmap::DDS, Bitmap::GetFileTypeFromFilename("BAR.DDS"));
  EXPECT_EQ(Bitmap::UNKNOWN, Bitmap::GetFileTypeFromFilename("foo.bar"));
  EXPECT_EQ(Bitmap::UNKNOWN, Bitmap::GetFileTypeFromFilename("FOO.BAR"));
}

// Checks that mime types are detected as the correct type.
TEST_F(BitmapTest, GetFileTypeFromMimeType) {
  EXPECT_EQ(Bitmap::PNG, Bitmap::GetFileTypeFromMimeType("image/png"));
  EXPECT_EQ(Bitmap::JPEG, Bitmap::GetFileTypeFromMimeType("image/jpeg"));
  EXPECT_EQ(Bitmap::UNKNOWN, Bitmap::GetFileTypeFromFilename("text/plain"));
  EXPECT_EQ(Bitmap::UNKNOWN,
            Bitmap::GetFileTypeFromFilename("application/x-123"));
}

static const unsigned char kScaleUPDataNPOT[] = {
  // This is a 3x3 image.
  0x75, 0x58, 0x7b, 0x76,
  0x8a, 0x54, 0x85, 0x6f,
  0x93, 0x56, 0x74, 0x7d,

  0x3f, 0x58, 0x7a, 0x64,
  0x7a, 0x90, 0x75, 0x8f,
  0xb4, 0x7c, 0x71, 0x6b,

  0x84, 0x84, 0x85, 0x6c,
  0xb1, 0x73, 0x4f, 0x7c,
  0x97, 0x87, 0x78, 0xa2,
};

static const unsigned char kScaleUPDataPOT[] = {
  // This is the 4x4 scaled-up version of the above.
  0x75, 0x58, 0x7b, 0x76,
  0x8a, 0x54, 0x85, 0x6f,
  0x8a, 0x54, 0x85, 0x6f,
  0x93, 0x56, 0x74, 0x7d,

  0x3f, 0x58, 0x7a, 0x64,
  0x7a, 0x90, 0x75, 0x8f,
  0x7a, 0x90, 0x75, 0x8f,
  0xb4, 0x7c, 0x71, 0x6b,

  0x3f, 0x58, 0x7a, 0x64,
  0x7a, 0x90, 0x75, 0x8f,
  0x7a, 0x90, 0x75, 0x8f,
  0xb4, 0x7c, 0x71, 0x6b,

  0x84, 0x84, 0x85, 0x6c,
  0xb1, 0x73, 0x4f, 0x7c,
  0xb1, 0x73, 0x4f, 0x7c,
  0x97, 0x87, 0x78, 0xa2,
};

// Scales up a NPOT texture, compare with expected results.
TEST_F(BitmapTest, ScaleUpToPOT) {
  const unsigned int kWidth = 3;
  const unsigned int kHeight = 3;
  const unsigned int kComponents = 4;
  const unsigned int kPOTWidth = Bitmap::GetPOTSize(kWidth);
  ASSERT_EQ(kPOTWidth, 4);
  const unsigned int kPOTHeight = Bitmap::GetPOTSize(kHeight);
  ASSERT_EQ(kPOTHeight, 4);
  const Texture::Format format = Texture::ARGB8;
  unsigned int src_size = Bitmap::GetBufferSize(kWidth, kHeight, format);
  ASSERT_EQ(sizeof(kScaleUPDataNPOT), src_size);
  unsigned int dst_size = Bitmap::GetBufferSize(kPOTWidth, kPOTHeight, format);
  ASSERT_EQ(sizeof(kScaleUPDataPOT), dst_size);
  scoped_array<unsigned char> data(new unsigned char[dst_size]);
  ASSERT_TRUE(data.get() != NULL);
  // Check that scaling works when source and destination don't alias
  Bitmap::ScaleUpToPOT(kWidth, kHeight, format, kScaleUPDataNPOT, data.get());
  EXPECT_EQ(0, memcmp(data.get(), kScaleUPDataPOT, dst_size));

  // Check that scaling works when source and destination do alias
  memset(data.get(), 0, dst_size);
  memcpy(data.get(), kScaleUPDataNPOT, src_size);
  Bitmap::ScaleUpToPOT(kWidth, kHeight, format, data.get(), data.get());
  EXPECT_EQ(0, memcmp(data.get(), kScaleUPDataPOT, dst_size));
}

}  // namespace
